package App;

import java.awt.BorderLayout;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.sql.Connection; 
import java.sql.DriverManager; 
import java.sql.PreparedStatement; 
import java.sql.ResultSet; 
import java.sql.SQLException;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.math.RoundingMode;

public class BasketballPerformanceTrackerApp extends JFrame {

    /**
	 * 
	 */
	private int userID = 1;
	private static final long serialVersionUID = 1L;
	private JTextField ageField, weightField, shotsMadeField, dribblingTimeField;
    private JComboBox<String> bodyTypeComboBox, skillLevelComboBox,trainingDaysComboBox;
    private JLabel shootingTimerLabel, dribblingTimerLabel, exerciseMessageLabel;
    private JTextField shootingResultsField, dribblingResultsField;
    private Timer shootingTimer, dribblingTimer;
    private int shootingTimeRemaining, dribblingTimeRemaining;

    private String savedAge, savedWeight, savedBodyType, savedSkillLevel, savedTrainingDays;

    // To store daily progress data
    private DailyProgress dailyProgress;

    // Panel to display progress
    private JTextArea progressTextArea;

    // For displaying user info in progress tab
    private JLabel userInfoLabel;
    
    // Database connection details (new constants)

    public BasketballPerformanceTrackerApp() {
        setTitle("Basketball Performance Tracker");
        setSize(800, 600);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        
        connect();

        // Set up tabbed pane for app navigation
        JTabbedPane tabbedPane = new JTabbedPane();

        // Add tabs
        tabbedPane.addTab("User Info", createUserInfoPanel());
        tabbedPane.addTab("Skill Drills", createSkillDrillsPanel());
        tabbedPane.addTab("Results", createResultsPanel());
        tabbedPane.addTab("Progress", createProgressPanel());

        getContentPane().add(tabbedPane);

        // Center window
        setLocationRelativeTo(null);
        
    }
    
    Connection con;
	PreparedStatement pst;
	ResultSet rs;
	ResultSet countResult;
	
	public void connect() {
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			con = DriverManager.getConnection("jdbc:mysql://localhost:3306/basketballpt", "root", "");
		}
		
		catch (ClassNotFoundException ex) {
	        ex.printStackTrace();
	        JOptionPane.showMessageDialog(null, "Failed to connect to database. ClassNotFoundException: " + ex.getMessage());
	        System.exit(0);
	    } catch (SQLException ex) {
	        ex.printStackTrace();
	        JOptionPane.showMessageDialog(null, "Failed to connect to database. SQLException: " + ex.getMessage());
	        System.exit(0);
	    }
	}
   
    	
    

    private JPanel createUserInfoPanel() {
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        JLabel heading = new JLabel("Enter Player Information");
        heading.setFont(new Font("Arial", Font.BOLD, 18));
        heading.setHorizontalAlignment(SwingConstants.CENTER);

        JPanel formPanel = new JPanel(new GridLayout(6, 2, 10, 10));  // Changed to 6 rows for the save button
        formPanel.add(new JLabel("Age:"));
        ageField = new JTextField();
        ageField.setToolTipText("Input whole numbers only");
        ageField.addKeyListener(new KeyAdapter() {
        });
        formPanel.add(ageField);

        formPanel.add(new JLabel("Weight (kg):"));
        weightField = new JTextField();
        weightField.setToolTipText("Input up to 2 decimal numbers (0.00)");
        formPanel.add(weightField);

        formPanel.add(new JLabel("Body Type:"));
        bodyTypeComboBox = new JComboBox<>(new String[]{"- No type selected -", "Slim", "Average", "Heavy"});
        bodyTypeComboBox.setToolTipText("Select corresponding body type");
        formPanel.add(bodyTypeComboBox);

        formPanel.add(new JLabel("Skill Level:"));
        skillLevelComboBox = new JComboBox<>(new String[]{"- No level selected -" ,"1", "2", "3"});
        skillLevelComboBox.setToolTipText("Select corresponding level");
        formPanel.add(skillLevelComboBox);

        formPanel.add(new JLabel("Training Days:"));
        trainingDaysComboBox = new JComboBox<>(new String[]{"- No schedule selected -" ,"Monday, Wednesday & Friday", "Tuesday & Thursday", "Saturday & Sunday"});
        trainingDaysComboBox.setToolTipText("Select corresponding schedule");
        formPanel.add(trainingDaysComboBox);

        // Add save button to store values
        JButton saveButton = new JButton("Save Info");
        saveButton.setToolTipText("Make sure all data are filled");
        saveButton.addKeyListener(new KeyAdapter() {
        	@Override
        	
        	public void keyPressed(KeyEvent e) {
        		jLoginButtionKeyPressed(e);
        	}
        });
        saveButton.addActionListener(e -> {
            // Retrieve field values
            String age = ageField.getText().trim();
            String weight = weightField.getText().trim();
            String bodyType = (String) bodyTypeComboBox.getSelectedItem();
            String skillLevel = (String) skillLevelComboBox.getSelectedItem();
            String trainingDays = (String) trainingDaysComboBox.getSelectedItem();

            // Collect all validation errors
            StringBuilder errors = new StringBuilder();

            // Validate age (whole number)
            if (age.isEmpty()) {
                errors.append("Age cannot be blank.\n");
            } else {
                try {
                    Integer.parseInt(age);  // Check if age is a valid integer
                } catch (NumberFormatException ex) {
                    errors.append("Age must be a whole number.\n");
                }
            }

            // Validate weight (number with up to 2 decimal places)
            if (weight.isEmpty()) {
                errors.append("Weight cannot be blank.\n");
            } else {
                try {
                    // Validate weight as a number with up to two decimal places
                    if (!weight.matches("^\\d+(\\.\\d{1,2})?$")) {
                        // Round the weight to 2 decimal places if more than 2 decimals
                        BigDecimal bd = new BigDecimal(weight);
                        bd = bd.setScale(2, RoundingMode.HALF_UP);
                        weightField.setText(bd.toString()); // Update the weight field with rounded value
                    }
                } catch (NumberFormatException ex) {
                    errors.append("Invalid weight format.\n");
                }
            }

            // Validate combo boxes
            if ("- No type selected -".equals(bodyType)) {
                errors.append("Please select a valid body type.\n");
            }
            if ("- No level selected -".equals(skillLevel)) {
                errors.append("Please select a valid skill level.\n");
            }
            if ("- No schedule selected -".equals(trainingDays)) {
                errors.append("Please select valid training days.\n");
            }

            // Show error messages if any fields are invalid
            if (errors.length() > 0) {
                JOptionPane.showMessageDialog(null, errors.toString(), "Validation Error", JOptionPane.ERROR_MESSAGE);
                return; // Prevent saving if there are validation errors
            }

            // If all fields are valid, proceed with saving
            JOptionPane.showMessageDialog(null, "Information saved successfully!");
        });
        formPanel.add(saveButton);

        panel.add(heading, BorderLayout.NORTH);
        panel.add(formPanel, BorderLayout.CENTER);
        return panel;
    }

    private JPanel createSkillDrillsPanel() {
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        JLabel heading = new JLabel("Skill Drills");
        heading.setFont(new Font("Arial", Font.BOLD, 18));
        heading.setHorizontalAlignment(SwingConstants.CENTER);

        JPanel drillsPanel = new JPanel(new GridLayout(5, 1, 10, 10));

        shootingTimerLabel = new JLabel("Shooting Timer: 05:00", JLabel.CENTER);
        JButton startShootingButton = new JButton("Start Shooting Drill");
        startShootingButton.addActionListener(e -> startShootingTimer());
        drillsPanel.add(shootingTimerLabel);
        drillsPanel.add(startShootingButton);

        dribblingTimerLabel = new JLabel("Dribbling Timer: 05:00", JLabel.CENTER);
        JButton startDribblingButton = new JButton("Start Dribbling Drill");
        startDribblingButton.addActionListener(e -> startDribblingTimer());
        drillsPanel.add(dribblingTimerLabel);
        drillsPanel.add(startDribblingButton);

        // Label for exercise instructions based on skill level
        exerciseMessageLabel = new JLabel("Select skill level to display exercise details", JLabel.CENTER);
        drillsPanel.add(exerciseMessageLabel);

        skillLevelComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateExerciseMessage();
            }
        });

        panel.add(heading, BorderLayout.NORTH);
        panel.add(drillsPanel, BorderLayout.CENTER);
        return panel;
    }

    private JPanel createResultsPanel() {
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        JLabel heading = new JLabel("Performance Results");
        heading.setFont(new Font("Arial", Font.BOLD, 18));
        heading.setHorizontalAlignment(SwingConstants.CENTER);

        JPanel resultsPanel = new JPanel(new GridLayout(4, 2, 10, 10));
        resultsPanel.add(new JLabel("Shots Made:"));
        shootingResultsField = new JTextField();
        resultsPanel.add(shootingResultsField);

        resultsPanel.add(new JLabel("Dribbling Time (secs):"));
        dribblingResultsField = new JTextField();
        resultsPanel.add(dribblingResultsField);

        JButton calculateButton = new JButton("Calculate Results");
        calculateButton.addActionListener(e -> calculateResults());
        resultsPanel.add(calculateButton);

        panel.add(heading, BorderLayout.NORTH);
        panel.add(resultsPanel, BorderLayout.CENTER);
        return panel;
    }

    private JPanel createProgressPanel() {
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        JLabel heading = new JLabel("Training Progress");
        heading.setFont(new Font("Arial", Font.BOLD, 18));
        heading.setHorizontalAlignment(SwingConstants.CENTER);

        // Progress Text Area
        progressTextArea = new JTextArea(10, 30);
        progressTextArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(progressTextArea);

        // Button to calculate endurance
        JButton calculateEnduranceButton = new JButton("Calculate Endurance");
        calculateEnduranceButton.addActionListener(e -> calculateEndurance());

        // User info label
        userInfoLabel = new JLabel("User Info: Not Available", JLabel.CENTER);

        // Button to load progress
        JButton loadProgressButton = new JButton("Load Training Progress");
        loadProgressButton.addActionListener(e -> loadProgress());

        // Panel layout
        JPanel bottomPanel = new JPanel();
        bottomPanel.setLayout(new BoxLayout(bottomPanel, BoxLayout.Y_AXIS));
        bottomPanel.add(calculateEnduranceButton);
        bottomPanel.add(userInfoLabel);
        bottomPanel.add(loadProgressButton);

        panel.add(heading, BorderLayout.NORTH);
        panel.add(scrollPane, BorderLayout.CENTER);
        panel.add(bottomPanel, BorderLayout.SOUTH);

        return panel;
    }

    private Object loadProgress() {
		// TODO Auto-generated method stub
		return null;
	}

	private void startShootingTimer() {
        shootingTimeRemaining = 300; // 5 minutes in seconds
        shootingTimer = new Timer(1000, e -> {
            if (shootingTimeRemaining > 0) {
                shootingTimeRemaining--;
                shootingTimerLabel.setText("Shooting Timer: " + formatTime(shootingTimeRemaining));
            } else {
                ((Timer) e.getSource()).stop();
                JOptionPane.showMessageDialog(this, "Shooting Drill Complete!", "Timer", JOptionPane.INFORMATION_MESSAGE);
            }
        });
        shootingTimer.start();
    }

    private void startDribblingTimer() {
        dribblingTimeRemaining = 300; // 5 minutes in seconds
        dribblingTimer = new Timer(1000, e -> {
            if (dribblingTimeRemaining > 0) {
                dribblingTimeRemaining--;
                dribblingTimerLabel.setText("Dribbling Timer: " + formatTime(dribblingTimeRemaining));
            } else {
                ((Timer) e.getSource()).stop();
                JOptionPane.showMessageDialog(this, "Dribbling Drill Complete!", "Timer", JOptionPane.INFORMATION_MESSAGE);
            }
        });
        dribblingTimer.start();
    }

    private String formatTime(int seconds) {
        int minutes = seconds / 60;
        int remainingSeconds = seconds % 60;
        return String.format("%02d:%02d", minutes, remainingSeconds);
    }

    private void updateExerciseMessage() {
        String skillLevel = (String) skillLevelComboBox.getSelectedItem();
        switch (skillLevel) {
            case "1":
                exerciseMessageLabel.setText("<html><b>Skill Level 1 Exercises:</b><br>Shooting Drill (4-5 minutes): 5 shots from 3 designated spots.<br>Dribbling Drill (4-5 minutes): Simple cone course.</html>");
                break;
            case "2":
                exerciseMessageLabel.setText("<html><b>Skill Level 2 Exercises:</b><br>Shooting Drill (4-5 minutes): 5 shots from 3 farther spots.<br>Dribbling Drill (4-5 minutes): Cone course (timed).</html>");
                break;
            case "3":
                exerciseMessageLabel.setText("<html><b>Skill Level 3 Exercises:</b><br>Shooting Drill (4-5 minutes): 5 shots from 3-point lane.<br>Dribbling Drill (4-5 minutes): Complex cone course.</html>");
                break;
            default:
                exerciseMessageLabel.setText("Select a skill level to view the exercise details.");
                break;
        }
    }

    private void calculateResults() {
        // Insert code to calculate shooting accuracy, dribbling time, etc.
    }

    private void calculateEndurance() {
        try {
            int shotsMade = Integer.parseInt(shootingResultsField.getText());
            int dribblingTime = Integer.parseInt(dribblingResultsField.getText());
            int endurance = (shotsMade * 10) + (300 - dribblingTime); // Arbitrary formula for endurance
            JOptionPane.showMessageDialog(this, "Your endurance score is: " + endurance, "Endurance", JOptionPane.INFORMATION_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter valid data for endurance calculation!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void saveUserInfo() {
    	
    	savedAge = ageField.getText();
    	savedWeight = weightField.getText();
    	savedBodyType = (String) bodyTypeComboBox.getSelectedItem();
    	savedSkillLevel = (String) skillLevelComboBox.getSelectedItem();
    	savedTrainingDays = (String) trainingDaysComboBox.getSelectedItem();

    	try {
    	    pst = con.prepareStatement("insert into userinfo (`age`, `weight`, `body_Type`, `skill_Level`, `training_Days`) values(?,?,?,?,?)");
    	    pst.setString(1, savedAge);
    	    pst.setString(2, savedWeight);
    	    pst.setString(3, savedBodyType);  // This ensures 'body_Type' is correctly set as a String
    	    pst.setString(4, savedSkillLevel);
    	    pst.setString(5, savedTrainingDays);
    	    pst.executeUpdate();
    	    JOptionPane.showMessageDialog(null, "Record Added!");

    	    // Clear fields
    	    ageField.setText("");
    	    weightField.setText("");
    	    bodyTypeComboBox.setSelectedItem("- No type selected -");  // Setting default if "Slim" is an option
    	    skillLevelComboBox.setSelectedItem("- No skill selected -");   // Setting default index (0 or any valid index)
    	    trainingDaysComboBox.setSelectedItem("- No schedule selected -");
    	    ageField.requestFocus();

    	    // Show confirmation message
    	    JOptionPane.showMessageDialog(this, "User Info Saved!", "Info", JOptionPane.INFORMATION_MESSAGE);
    	    userInfoLabel.setText("<html>Age: " + savedAge + "<br>Weight: " + savedWeight + "<br>Body Type: " + savedBodyType +
    	            "<br>Skill Level: " + savedSkillLevel + "<br>Training Days: " + savedTrainingDays + "</html>");
    	} catch (SQLException e) {
    	    e.printStackTrace();
    	    JOptionPane.showMessageDialog(this, "Failed to save user info: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    	}

    }

    private static class DailyProgress {
        int shotsMade, dribblingTime, trainingDays;
        double shootingPercentage;

        DailyProgress(int shotsMade, int dribblingTime, double shootingPercentage, int trainingDays) {
            this.shotsMade = shotsMade;
            this.dribblingTime = dribblingTime;
            this.shootingPercentage = shootingPercentage;
            this.trainingDays = trainingDays;
        }

        @Override
        public String toString() {
            return "Day " + trainingDays + ": Shots Made = " + shotsMade + ", Dribbling Time = " + dribblingTime + " sec, Shooting % = " + shootingPercentage + "%";
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            BasketballPerformanceTrackerApp app = new BasketballPerformanceTrackerApp();
            app.setVisible(true);
        });
    }
    
    private void jLoginButtionKeyPressed(KeyEvent e) {
    	
		
    	
    		
    	
    }
}
