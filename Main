import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

public class BasketballPerformanceTrackerApp extends JFrame {

    private JTextField ageField, weightField, trainingDaysField, shotsMadeField, dribblingTimeField;
    private JComboBox<String> bodyTypeComboBox, skillLevelComboBox;
    private JLabel shootingTimerLabel, dribblingTimerLabel, exerciseMessageLabel;
    private JTextField shootingResultsField, dribblingResultsField;
    private Timer shootingTimer, dribblingTimer;
    private int shootingTimeRemaining, dribblingTimeRemaining;

    private String savedAge, savedWeight, savedBodyType, savedSkillLevel, savedTrainingDays;
    
    // To store daily progress data
    private ArrayList<DailyProgress> trainingProgressList = new ArrayList<>();

    // Panel to display progress
    private JTextArea progressTextArea;

    // For displaying user info in progress tab
    private JLabel userInfoLabel;

    public BasketballPerformanceTrackerApp() {
        setTitle("Basketball Performance Tracker");
        setSize(800, 600);
        setDefaultCloseOperation(EXIT_ON_CLOSE);

        // Set up tabbed pane for app navigation
        JTabbedPane tabbedPane = new JTabbedPane();

        // Add tabs
        tabbedPane.addTab("User Info", createUserInfoPanel());
        tabbedPane.addTab("Skill Drills", createSkillDrillsPanel());
        tabbedPane.addTab("Results", createResultsPanel());
        tabbedPane.addTab("Progress", createProgressPanel());

        add(tabbedPane);

        // Center window
        setLocationRelativeTo(null);
    }

    private JPanel createUserInfoPanel() {
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        JLabel heading = new JLabel("Enter Player Information");
        heading.setFont(new Font("Arial", Font.BOLD, 18));
        heading.setHorizontalAlignment(SwingConstants.CENTER);

        JPanel formPanel = new JPanel(new GridLayout(6, 2, 10, 10));  // Changed to 6 rows for the save button
        formPanel.add(new JLabel("Age:"));
        ageField = new JTextField();
        formPanel.add(ageField);

        formPanel.add(new JLabel("Weight (kg):"));
        weightField = new JTextField();
        formPanel.add(weightField);

        formPanel.add(new JLabel("Body Type:"));
        bodyTypeComboBox = new JComboBox<>(new String[]{"Slim", "Average", "Heavy"});
        formPanel.add(bodyTypeComboBox);

        formPanel.add(new JLabel("Skill Level:"));
        skillLevelComboBox = new JComboBox<>(new String[]{"1", "2", "3"});
        formPanel.add(skillLevelComboBox);

        formPanel.add(new JLabel("Training Days:"));
        trainingDaysField = new JTextField();
        formPanel.add(trainingDaysField);

        // Add save button to store values
        JButton saveButton = new JButton("Save Info");
        saveButton.addActionListener(e -> saveUserInfo());
        formPanel.add(saveButton);

        panel.add(heading, BorderLayout.NORTH);
        panel.add(formPanel, BorderLayout.CENTER);
        return panel;
    }

    private JPanel createSkillDrillsPanel() {
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        JLabel heading = new JLabel("Skill Drills");
        heading.setFont(new Font("Arial", Font.BOLD, 18));
        heading.setHorizontalAlignment(SwingConstants.CENTER);

        JPanel drillsPanel = new JPanel(new GridLayout(5, 1, 10, 10));

        shootingTimerLabel = new JLabel("Shooting Timer: 05:00", JLabel.CENTER);
        JButton startShootingButton = new JButton("Start Shooting Drill");
        startShootingButton.addActionListener(e -> startShootingTimer());
        drillsPanel.add(shootingTimerLabel);
        drillsPanel.add(startShootingButton);

        dribblingTimerLabel = new JLabel("Dribbling Timer: 05:00", JLabel.CENTER);
        JButton startDribblingButton = new JButton("Start Dribbling Drill");
        startDribblingButton.addActionListener(e -> startDribblingTimer());
        drillsPanel.add(dribblingTimerLabel);
        drillsPanel.add(startDribblingButton);

        // Label for exercise instructions based on skill level
        exerciseMessageLabel = new JLabel("Select skill level to display exercise details", JLabel.CENTER);
        drillsPanel.add(exerciseMessageLabel);

        skillLevelComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateExerciseMessage();
            }
        });

        panel.add(heading, BorderLayout.NORTH);
        panel.add(drillsPanel, BorderLayout.CENTER);
        return panel;
    }

    private JPanel createResultsPanel() {
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        JLabel heading = new JLabel("Performance Results");
        heading.setFont(new Font("Arial", Font.BOLD, 18));
        heading.setHorizontalAlignment(SwingConstants.CENTER);

        JPanel resultsPanel = new JPanel(new GridLayout(4, 2, 10, 10));
        resultsPanel.add(new JLabel("Shots Made:"));
        shootingResultsField = new JTextField();
        resultsPanel.add(shootingResultsField);

        resultsPanel.add(new JLabel("Dribbling Time (secs):"));
        dribblingResultsField = new JTextField();
        resultsPanel.add(dribblingResultsField);

        JButton calculateButton = new JButton("Calculate Results");
        calculateButton.addActionListener(e -> calculateResults());
        resultsPanel.add(calculateButton);

        panel.add(heading, BorderLayout.NORTH);
        panel.add(resultsPanel, BorderLayout.CENTER);
        return panel;
    }

    private JPanel createProgressPanel() {
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        JLabel heading = new JLabel("Training Progress");
        heading.setFont(new Font("Arial", Font.BOLD, 18));
        heading.setHorizontalAlignment(SwingConstants.CENTER);

        // Progress Text Area
        progressTextArea = new JTextArea(10, 30);
        progressTextArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(progressTextArea);

        // Button to calculate endurance
        JButton calculateEnduranceButton = new JButton("Calculate Endurance");
        calculateEnduranceButton.addActionListener(e -> calculateEndurance());

        // User info label
        userInfoLabel = new JLabel("User Info: Not Available", JLabel.CENTER);

        // Button to load progress
        JButton loadProgressButton = new JButton("Load Training Progress");
        loadProgressButton.addActionListener(e -> loadProgress());

        // Panel layout
        JPanel bottomPanel = new JPanel();
        bottomPanel.setLayout(new BoxLayout(bottomPanel, BoxLayout.Y_AXIS));
        bottomPanel.add(calculateEnduranceButton);
        bottomPanel.add(userInfoLabel);
        bottomPanel.add(loadProgressButton);

        panel.add(heading, BorderLayout.NORTH);
        panel.add(scrollPane, BorderLayout.CENTER);
        panel.add(bottomPanel, BorderLayout.SOUTH);

        return panel;
    }

    private void startShootingTimer() {
        shootingTimeRemaining = 300; // 5 minutes in seconds
        shootingTimer = new Timer(1000, e -> {
            if (shootingTimeRemaining > 0) {
                shootingTimeRemaining--;
                shootingTimerLabel.setText("Shooting Timer: " + formatTime(shootingTimeRemaining));
            } else {
                ((Timer) e.getSource()).stop();
                JOptionPane.showMessageDialog(this, "Shooting Drill Complete!", "Timer", JOptionPane.INFORMATION_MESSAGE);
            }
        });
        shootingTimer.start();
    }

    private void startDribblingTimer() {
        dribblingTimeRemaining = 300; // 5 minutes in seconds
        dribblingTimer = new Timer(1000, e -> {
            if (dribblingTimeRemaining > 0) {
                dribblingTimeRemaining--;
                dribblingTimerLabel.setText("Dribbling Timer: " + formatTime(dribblingTimeRemaining));
            } else {
                ((Timer) e.getSource()).stop();
                JOptionPane.showMessageDialog(this, "Dribbling Drill Complete!", "Timer", JOptionPane.INFORMATION_MESSAGE);
            }
        });
        dribblingTimer.start();
    }

    private String formatTime(int seconds) {
        int minutes = seconds / 60;
        int remainingSeconds = seconds % 60;
        return String.format("%02d:%02d", minutes, remainingSeconds);
    }

    private void updateExerciseMessage() {
        String skillLevel = (String) skillLevelComboBox.getSelectedItem();
        switch (skillLevel) {
            case "1":
                exerciseMessageLabel.setText("<html><b>Skill Level 1 Exercises:</b><br>Shooting Drill (4-5 minutes): 5 shots from each of 3 spots.<br>Dribbling Drill (4-5 minutes): Simple cone course (timed).</html>");
                break;
            case "2":
                exerciseMessageLabel.setText("<html><b>Skill Level 2 Exercises:</b><br>Shooting Drill (4-5 minutes): 5 shots from each of 3 farther spots.<br>Dribbling Drill (4-5 minutes): Cone course (timed).</html>");
                break;
            case "3":
                exerciseMessageLabel.setText("<html><b>Skill Level 3 Exercises:</b><br>Shooting Drill (4-5 minutes): 5 shots from each of 3-point lane spots.<br>Dribbling Drill (4-5 minutes): Complex cone course.</html>");
                break;
            default:
                exerciseMessageLabel.setText("Select a skill level to view the exercise details.");
                break;
        }
    }

    private void calculateEndurance() {
        try {
            int shotsMade = Integer.parseInt(shootingResultsField.getText());
            int dribblingTime = Integer.parseInt(dribblingResultsField.getText());
            int endurance = (shotsMade * 10) + (300 - dribblingTime); // Arbitrary formula for endurance
            JOptionPane.showMessageDialog(this, "Your endurance score is: " + endurance, "Endurance", JOptionPane.INFORMATION_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter valid data for endurance calculation!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void saveUserInfo() {
        savedAge = ageField.getText();
        savedWeight = weightField.getText();
        savedBodyType = (String) bodyTypeComboBox.getSelectedItem();
        savedSkillLevel = (String) skillLevelComboBox.getSelectedItem();
        savedTrainingDays = trainingDaysField.getText();

        JOptionPane.showMessageDialog(this, "User Info Saved!", "Info", JOptionPane.INFORMATION_MESSAGE);
        userInfoLabel.setText("<html>Age: " + savedAge + "<br>Weight: " + savedWeight + "<br>Body Type: " + savedBodyType +
                "<br>Skill Level: " + savedSkillLevel + "<br>Training Days: " + savedTrainingDays + "</html>");
    }

    private void loadProgress() {
        progressTextArea.setText(""); // Clear the progress text area before loading new data
        for (DailyProgress progress : trainingProgressList) {
            progressTextArea.append(progress.toString() + "\n");
        }
    }

    private void calculateResults() {
        try {
            int shotsMade = Integer.parseInt(shootingResultsField.getText());
            int totalShots = 25; // Fixed total shots in 5 minutes
            double shootingPercentage = (shotsMade * 100.0) / totalShots;
            int dribblingTime = Integer.parseInt(dribblingResultsField.getText());
            int trainingDay = Integer.parseInt(savedTrainingDays);
            DailyProgress newProgress = new DailyProgress(shotsMade, dribblingTime, shootingPercentage, trainingDay);
            trainingProgressList.add(newProgress);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter valid data for calculation!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private static class DailyProgress {
        int shotsMade, dribblingTime, trainingDays;
        double shootingPercentage;

        DailyProgress(int shotsMade, int dribblingTime, double shootingPercentage, int trainingDays) {
            this.shotsMade = shotsMade;
            this.dribblingTime = dribblingTime;
            this.shootingPercentage = shootingPercentage;
            this.trainingDays = trainingDays;
        }

        @Override
        public String toString() {
            return "Day " + trainingDays + ": Shots Made = " + shotsMade + ", Dribbling Time = " + dribblingTime + " sec, Shooting % = " + shootingPercentage + "%";
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            BasketballPerformanceTrackerApp app = new BasketballPerformanceTrackerApp();
            app.setVisible(true);
        });
    }
}
