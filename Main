package App;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.HashMap;

public class App1 extends JFrame {

    // For storing user credentials
    private HashMap<String, String> userAccounts = new HashMap<>();

    // Panels
    private JPanel loginPanel, signUpPanel, mainAppPanel;

    // Fields for User Info
    private JTextField ageField, weightField, shotsMadeField, dribblingTimeField;
    private JComboBox<String> bodyTypeComboBox, skillLevelComboBox, trainingDaysComboBox;
    private JLabel shootingTimerLabel, dribblingTimerLabel, exerciseMessageLabel, userInfoLabel;
    private Timer shootingTimer, dribblingTimer;
    private int shootingTimeRemaining, dribblingTimeRemaining;
    
    private String savedAge, savedWeight, savedBodyType, savedSkillLevel, savedTrainingDays;

    // To store progress
    private ArrayList<DailyProgress> trainingProgressList = new ArrayList<>();
    private JTextArea progressTextArea;

	private Window signUpButton;

	private Window backToLoginButton;

    public App1() {
        setTitle("Basketball Performance Tracker");
        setSize(800, 600);
        setDefaultCloseOperation(EXIT_ON_CLOSE);

        // Initialize panels
        loginPanel = createLoginPanel();
        signUpPanel = createSignUpPanel();
        mainAppPanel = createMainAppPanel();

        setContentPane(loginPanel); // Show login panel first
        setLocationRelativeTo(null); // Center window
    }

    // ---------------- LOGIN PANEL ------------------
    private JPanel createLoginPanel() {
        JPanel panel = new JPanel(new GridBagLayout());
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        JLabel heading = new JLabel("Login");
        heading.setFont(new Font("Arial", Font.BOLD, 24));

        JTextField usernameField = new JTextField(15);
        JPasswordField passwordField = new JPasswordField(15);

        JButton loginButton = new JButton("Login");
        JButton goToSignUpButton = new JButton("Sign Up");

        panel.setLayout(null); // Disable layout manager

        // New Username Label
        JLabel usernameLabel = new JLabel("New Username:");
        usernameLabel.setBounds(10, 10, 120, 25); // x, y, width, height
        panel.add(usernameLabel);

        // Username Field
        usernameField.setBounds(140, 10, 200, 25);
        panel.add(usernameField);

        // New Password Label
        JLabel passwordLabel = new JLabel("New Password:");
        passwordLabel.setBounds(10, 50, 120, 25);
        panel.add(passwordLabel);

        // Password Field
        passwordField.setBounds(140, 50, 200, 25);
        panel.add(passwordField);

        // Sign-Up Button
        signUpButton.setBounds(10, 90, 150, 30);
        panel.add(signUpButton);

        // Back to Login Button
        backToLoginButton.setBounds(180, 90, 150, 30);
        panel.add(backToLoginButton);



        loginButton.addActionListener(e -> {
            String username = usernameField.getText();
            String password = new String(passwordField.getPassword());

            if (userAccounts.containsKey(username) && userAccounts.get(username).equals(password)) {
                JOptionPane.showMessageDialog(this, "Login Successful!", "Success", JOptionPane.INFORMATION_MESSAGE);
                setContentPane(mainAppPanel); // Show the main app
                revalidate();
            } else {
                JOptionPane.showMessageDialog(this, "Invalid Credentials!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        goToSignUpButton.addActionListener(e -> {
            setContentPane(signUpPanel);
            revalidate();
        });

        return panel;
    }

    // ---------------- SIGN-UP PANEL ------------------
    /**
     * @return
     */
    private JPanel createSignUpPanel() {
        JPanel panel = new JPanel(new GridBagLayout());
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        JLabel heading = new JLabel("Sign Up");
        heading.setFont(new Font("Arial", Font.BOLD, 24));

        JTextField usernameField = new JTextField(15);
        JPasswordField passwordField = new JPasswordField(15);

        JButton signUpButton = new JButton("Sign Up");
        JButton backToLoginButton = new JButton("Back to Login");

        panel.setLayout(null); // Disable layout manager

     // New Username Label
     JLabel usernameLabel = new JLabel("New Username:");
     usernameLabel.setBounds(10, 10, 120, 25); // x, y, width, height
     panel.add(usernameLabel);

     // Username Field
     usernameField.setBounds(140, 10, 200, 25);
     panel.add(usernameField);

     // New Password Label
     JLabel passwordLabel = new JLabel("New Password:");
     passwordLabel.setBounds(10, 50, 120, 25);
     panel.add(passwordLabel);

     // Password Field
     passwordField.setBounds(140, 50, 200, 25);
     panel.add(passwordField);

     // Sign-Up Button
     signUpButton.setBounds(10, 90, 150, 30);
     panel.add(signUpButton);

     // Back to Login Button
     backToLoginButton.setBounds(180, 90, 150, 30);
     panel.add(backToLoginButton);



        signUpButton.addActionListener(e -> {
            String username = usernameField.getText();
            String password = new String(passwordField.getPassword());

            if (!username.isEmpty() && !password.isEmpty()) {
                if (!userAccounts.containsKey(username)) {
                    userAccounts.put(username, password);
                    JOptionPane.showMessageDialog(this, "Account Created Successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    setContentPane(loginPanel);
                    revalidate();
                } else {
                    JOptionPane.showMessageDialog(this, "Username already exists!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please fill in all fields!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        backToLoginButton.addActionListener(e -> {
            setContentPane(loginPanel);
            revalidate();
        });

        return panel;
    }

    // ---------------- MAIN APP PANEL ------------------
    private JPanel createMainAppPanel() {
        JPanel panel = new JPanel(new BorderLayout());

        // Set a preferred size for the main panel to make it bigger
        panel.setPreferredSize(new Dimension(800, 600));  // Set your desired width and height

        JLabel welcomeLabel = new JLabel("Welcome to Basketball Performance Tracker!", JLabel.CENTER);
        welcomeLabel.setFont(new Font("Arial", Font.BOLD, 22)); // Increase font size for better visibility

        // Main Tabs
        JTabbedPane tabbedPane = new JTabbedPane();
        tabbedPane.addTab("User Info", createUserInfoPanel());
        tabbedPane.addTab("Skill Drills", createSkillDrillsPanel());
        tabbedPane.addTab("Results", createResultsPanel());
        tabbedPane.addTab("Progress", createProgressPanel());

        // Optional: Set preferred size for the tabbed pane if you want it bigger
        tabbedPane.setPreferredSize(new Dimension(780, 500)); // Adjust size here

        panel.add(welcomeLabel, BorderLayout.NORTH);
        panel.add(tabbedPane, BorderLayout.CENTER);

        return panel;
    }

    // ---------------- USER INFO PANEL ------------------
    private JPanel createUserInfoPanel() {
        JPanel panel = new JPanel(new GridLayout(6, 2, 10, 10));
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        panel.add(new JLabel("Age:"));
        ageField = new JTextField();
        panel.add(ageField);

        panel.add(new JLabel("Weight (kg):"));
        weightField = new JTextField();
        panel.add(weightField);

        panel.add(new JLabel("Body Type:"));
        bodyTypeComboBox = new JComboBox<>(new String[]{"- No type selected -", "Slim", "Average", "Heavy"});
        bodyTypeComboBox.setToolTipText("Select corresponding body type");
        panel.add(bodyTypeComboBox);

        panel.add(new JLabel("Skill Level:"));
        skillLevelComboBox = new JComboBox<>(new String[]{"- No level selected -" ,"1", "2", "3"});
        skillLevelComboBox.setToolTipText("Select corresponding level");
        panel.add(skillLevelComboBox);

        panel.add(new JLabel("Training Days:"));
        trainingDaysComboBox = new JComboBox<>(new String[]{"- No schedule selected -" ,"Monday, Wednesday & Friday", "Tuesday & Thursday", "Saturday & Sunday"});
        trainingDaysComboBox.setToolTipText("Select corresponding schedule");
        panel.add(trainingDaysComboBox);

        JButton saveButton = new JButton("Save Info");
        saveButton.addActionListener(e -> saveUserInfo());
        panel.add(saveButton);

        return panel;
    }

    // ---------------- SKILL DRILLS PANEL ------------------
    //private int shootingTimeElapsed = 0;
    //private int dribblingTimeElapsed = 0;
   // private boolean shootingPaused = false;
    //private boolean dribblingPaused = false;


    private JPanel createSkillDrillsPanel() {
        JPanel panel = new JPanel(new GridLayout(8, 1, 10, 10));

        // Timer Input Fields
        JPanel inputPanel = new JPanel(new FlowLayout());
        JLabel inputLabel = new JLabel("Set Timer (MM:SS): ");
        JTextField minutesField = new JTextField(2);
        JTextField secondsField = new JTextField(2);
        inputPanel.add(inputLabel);
        inputPanel.add(minutesField);
        inputPanel.add(new JLabel(":"));
        inputPanel.add(secondsField);

        // Timer Labels with Bigger Font
        shootingTimerLabel = new JLabel("Shooting Timer: 00:00", JLabel.CENTER);
        shootingTimerLabel.setFont(new Font("Arial", Font.BOLD, 24));
        dribblingTimerLabel = new JLabel("Dribbling Timer: 00:00", JLabel.CENTER);
        dribblingTimerLabel.setFont(new Font("Arial", Font.BOLD, 24));
        exerciseMessageLabel = new JLabel("Select skill level to display exercise details", JLabel.CENTER);
        exerciseMessageLabel.setFont(new Font("Arial", Font.BOLD, 15));
        
        // Buttons for Shooting Timer
        JButton startShootingButton = new JButton("Start");
        JButton pauseShootingButton = new JButton("Pause");
        JButton resetShootingButton = new JButton("Reset");

        // Buttons for Dribbling Timer
        JButton startDribblingButton = new JButton("Start");
        JButton pauseDribblingButton = new JButton("Pause");
        JButton resetDribblingButton = new JButton("Reset");

        // Button Sizes
        Dimension buttonSize = new Dimension(80, 30);
        startShootingButton.setPreferredSize(buttonSize);
        pauseShootingButton.setPreferredSize(buttonSize);
        resetShootingButton.setPreferredSize(buttonSize);
        startDribblingButton.setPreferredSize(buttonSize);
        pauseDribblingButton.setPreferredSize(buttonSize);
        resetDribblingButton.setPreferredSize(buttonSize);

        // Shooting Timer Logic
        startShootingButton.addActionListener(e -> {
            int minutes = Integer.parseInt(minutesField.getText());
            int seconds = Integer.parseInt(secondsField.getText());
            startTimer(minutes * 60 + seconds, shootingTimerLabel);
        });
        pauseShootingButton.addActionListener(e -> pauseTimer());
        resetShootingButton.addActionListener(e -> resetTimer(shootingTimerLabel));

        // Dribbling Timer Logic
        startDribblingButton.addActionListener(e -> {
            int minutes = Integer.parseInt(minutesField.getText());
            int seconds = Integer.parseInt(secondsField.getText());
            startTimer(minutes * 60 + seconds, dribblingTimerLabel);
        });
        pauseDribblingButton.addActionListener(e -> pauseTimer());
        resetDribblingButton.addActionListener(e -> resetTimer(dribblingTimerLabel));

        // Add Components to Panel
        panel.add(inputPanel);
        panel.add(shootingTimerLabel);
        panel.add(createButtonPanel(startShootingButton, pauseShootingButton, resetShootingButton));
        panel.add(dribblingTimerLabel);
        panel.add(createButtonPanel(startDribblingButton, pauseDribblingButton, resetDribblingButton));
        panel.add(exerciseMessageLabel);

        skillLevelComboBox.addActionListener(e -> updateExerciseMessage());
        return panel;
    }

    // Helper Method to Create Button Panel
    private JPanel createButtonPanel(JButton start, JButton pause, JButton reset) {
        JPanel buttonPanel = new JPanel(new FlowLayout());
        buttonPanel.add(start);
        buttonPanel.add(pause);
        buttonPanel.add(reset);
        return buttonPanel;
    }

    // ---------------- RESULTS PANEL ------------------
    private JPanel createResultsPanel() {
        JPanel panel = new JPanel(new GridLayout(4, 2, 10, 10));

        panel.add(new JLabel("Shots Made:"));
        shotsMadeField = new JTextField();
        panel.add(shotsMadeField);

        panel.add(new JLabel("Dribbling Time (secs):"));
        dribblingTimeField = new JTextField();
        panel.add(dribblingTimeField);

        JButton calculateButton = new JButton("Calculate Results");
        calculateButton.addActionListener(e -> calculateResults());
        panel.add(calculateButton);

        return panel;
    }

    // ---------------- PROGRESS PANEL ------------------
    private JPanel createProgressPanel() {
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        JLabel heading = new JLabel("Training Progress");
        heading.setFont(new Font("Arial", Font.BOLD, 18));
        heading.setHorizontalAlignment(SwingConstants.CENTER);

        // Progress Text Area
        progressTextArea = new JTextArea(10, 30);
        progressTextArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(progressTextArea);

        // Button to calculate endurance
        JButton calculateEnduranceButton = new JButton("Calculate Endurance");
        calculateEnduranceButton.addActionListener(e -> calculateEndurance());

        // User info label
        userInfoLabel = new JLabel("User Info: Not Available", JLabel.CENTER);

        // Button to load progress
        JButton loadProgressButton = new JButton("Load Training Progress");
        loadProgressButton.addActionListener(e -> loadProgress());

        // Panel layout
        JPanel bottomPanel = new JPanel();
        bottomPanel.setLayout(new BoxLayout(bottomPanel, BoxLayout.Y_AXIS));
        bottomPanel.add(calculateEnduranceButton);
        bottomPanel.add(userInfoLabel);
        bottomPanel.add(loadProgressButton);

        panel.add(heading, BorderLayout.NORTH);
        panel.add(scrollPane, BorderLayout.CENTER);
        panel.add(bottomPanel, BorderLayout.SOUTH);

        return panel;
    }
    
    private void loadProgress() {
        progressTextArea.setText(""); // Clear the progress text area before loading new data
        for (DailyProgress progress : trainingProgressList) {
            progressTextArea.append(progress.toString() + "\n");
        }
    }
    
    private void calculateEndurance() {
        try {
            int shotsMade = Integer.parseInt(shotsMadeField.getText());
            int dribblingTime = Integer.parseInt(dribblingTimeField.getText());
            int endurance = (shotsMade * 10) + (300 - dribblingTime); // Arbitrary formula for endurance
            JOptionPane.showMessageDialog(this, "Your endurance score is: " + endurance, "Endurance", JOptionPane.INFORMATION_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter valid data for endurance calculation!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // ---------------- USER INFO ACTION ------------------
    private void saveUserInfo() {
        savedAge = ageField.getText();
        savedWeight = weightField.getText();
        savedBodyType = (String) bodyTypeComboBox.getSelectedItem();
        savedSkillLevel = (String) skillLevelComboBox.getSelectedItem();
        savedTrainingDays = (String) trainingDaysComboBox.getSelectedItem();

        JOptionPane.showMessageDialog(this, "User Info Saved!", "Info", JOptionPane.INFORMATION_MESSAGE);
        userInfoLabel.setText("<html>Age: " + savedAge + "<br>Weight: " + savedWeight + "<br>Body Type: " + savedBodyType +
                "<br>Skill Level: " + savedSkillLevel + "<br>Training Days: " + savedTrainingDays + "</html>");
        
     // Retrieve field values
        String age = ageField.getText().trim();
        String weight = weightField.getText().trim();
        String bodyType = (String) bodyTypeComboBox.getSelectedItem();
        String skillLevel = (String) skillLevelComboBox.getSelectedItem();
        String trainingDays = (String) trainingDaysComboBox.getSelectedItem();

        // Collect all validation errors
        StringBuilder errors = new StringBuilder();

        // Validate age (whole number)
        if (age.isEmpty()) {
            errors.append("Age cannot be blank.\n");
        } else {
            try {
                Integer.parseInt(age);  // Check if age is a valid integer
            } catch (NumberFormatException ex) {
                errors.append("Age must be a whole number.\n");
            }
        }

        // Validate weight (number with up to 2 decimal places)
        if (weight.isEmpty()) {
            errors.append("Weight cannot be blank.\n");
        } else {
            try {
                // Validate weight as a number with up to two decimal places
                if (!weight.matches("^\\d+(\\.\\d{1,2})?$")) {
                    // Round the weight to 2 decimal places if more than 2 decimals
                    BigDecimal bd = new BigDecimal(weight);
                    bd = bd.setScale(2, RoundingMode.HALF_UP);
                    weightField.setText(bd.toString()); // Update the weight field with rounded value
                }
            } catch (NumberFormatException ex) {
                errors.append("Invalid weight format.\n");
            }
        }

        // Validate combo boxes
        if ("- No type selected -".equals(bodyType)) {
            errors.append("Please select a valid body type.\n");
        }
        if ("- No level selected -".equals(skillLevel)) {
            errors.append("Please select a valid skill level.\n");
        }
        if ("- No schedule selected -".equals(trainingDays)) {
            errors.append("Please select valid training days.\n");
        }

        // Show error messages if any fields are invalid
        if (errors.length() > 0) {
            JOptionPane.showMessageDialog(null, errors.toString(), "Validation Error", JOptionPane.ERROR_MESSAGE);
            return; // Prevent saving if there are validation errors
        }

        // If all fields are valid, proceed with saving
        JOptionPane.showMessageDialog(null, "Information saved successfully!");
    }

    

    // ---------------- DRILL TIMER ACTIONS ------------------
    private Timer countdownTimer;
    private int timeRemaining;

    private void startTimer(int totalTime, JLabel timerLabel) {
        if (countdownTimer != null && countdownTimer.isRunning()) {
            countdownTimer.stop();
        }
        timeRemaining = totalTime;
        countdownTimer = new Timer(1000, e -> {
            if (timeRemaining <= 0) {
                countdownTimer.stop();
                timerLabel.setText("Time's Up!");
            } else {
                timeRemaining--;
                timerLabel.setText(String.format("Timer: %02d:%02d", timeRemaining / 60, timeRemaining % 60));
            }
        });
        countdownTimer.start();
    }

    private void pauseTimer() {
        if (countdownTimer != null && countdownTimer.isRunning()) {
            countdownTimer.stop();
        }
    }

    private void resetTimer(JLabel timerLabel) {
        if (countdownTimer != null) {
            countdownTimer.stop();
        }
        timeRemaining = 0;
        timerLabel.setText("Timer: 00:00");
    }
    // ---------------- RESULT CALCULATION ------------------
    private void calculateResults() {
        try {
            // Get shots made and validate input
            int shotsMade = Integer.parseInt(shotsMadeField.getText());
            int totalShots = 25; // Fixed total shots for training
            if (shotsMade < 0 || shotsMade > totalShots) {
                throw new NumberFormatException("Shots made should be between 0 and " + totalShots);
            }

            // Calculate shooting percentage
            double shootingPercentage = (shotsMade * 100.0) / totalShots;

            // Get dribbling time and validate input
            int dribblingTime = Integer.parseInt(dribblingTimeField.getText());
            if (dribblingTime < 0) {
                throw new NumberFormatException("Dribbling time cannot be negative");
            }

            // Get training day and validate input
            int trainingDay = Integer.parseInt(savedTrainingDays);  // Ensure `savedTrainingDays` is properly initialized and valid

            // Create and store the new progress
            DailyProgress newProgress = new DailyProgress(shotsMade, dribblingTime, shootingPercentage, trainingDay);
            trainingProgressList.add(newProgress);

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter valid data for calculation: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    	

    // ---------------- UPDATE EXERCISE MESSAGE ------------------
    private void updateExerciseMessage() {
        String skillLevel = (String) skillLevelComboBox.getSelectedItem();
        switch (skillLevel) {
            case "1":
                exerciseMessageLabel.setText("<html><b>Skill Level 1 Exercises:</b><br>Shooting Drill (4-5 minutes): 5 shots from each of 3 spots.<br>Dribbling Drill (4-5 minutes): Simple cone course (timed).</html>");
                break;
            case "2":
                exerciseMessageLabel.setText("<html><b>Skill Level 2 Exercises:</b><br>Shooting Drill (4-5 minutes): 5 shots from each of 3 farther spots.<br>Dribbling Drill (4-5 minutes): Cone course (timed).</html>");
                break;
            case "3":
                exerciseMessageLabel.setText("<html><b>Skill Level 3 Exercises:</b><br>Shooting Drill (4-5 minutes): 5 shots from each of 3-point lane spots.<br>Dribbling Drill (4-5 minutes): Complex cone course.</html>");
                break;
            default:
                exerciseMessageLabel.setText("Select a skill level to view the exercise details.");
                break;
        }
    }


    // ---------------- MAIN ------------------
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            App1 app = new App1();
            app.setVisible(true);
        });
    }

    // ---------------- Daily Progress Class ------------------
    static class DailyProgress {
    	int shotsMade, dribblingTime, trainingDays;
        double shootingPercentage;

        public DailyProgress(int shotsMade, int dribblingTime, double shootingPercentage, int trainingDay) {
            this.shotsMade = shotsMade;
            this.dribblingTime = dribblingTime;
            this.shootingPercentage = shootingPercentage;
            this.trainingDays = trainingDay;
        }

        @Override
        public String toString() {
            return "Day " + trainingDays + ": Shots Made = " + shotsMade + ", Dribbling Time = " + dribblingTime + " sec, Shooting % = " + shootingPercentage + "%";
        }
    }
}
