package App;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;

public class BasketballPerformanceTrackerApp extends JFrame {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	// For storing user credentials
    private HashMap<String, String> userAccounts = new HashMap<>();

    // Panels
    private JPanel loginPanel, signUpPanel, mainAppPanel;

    // Fields for User Info
    private JTextField ageField, weightField, trainingDaysField, shotsMadeField, dribblingTimeField;
    private JComboBox<String> bodyTypeComboBox, skillLevelComboBox;
    private JLabel shootingTimerLabel, dribblingTimerLabel, exerciseMessageLabel, userInfoLabel;
    private Timer shootingTimer, dribblingTimer;
    private int shootingTimeRemaining, dribblingTimeRemaining;
    
    private String savedAge, savedWeight, savedBodyType, savedSkillLevel, savedTrainingDays;

    // To store progress
    private ArrayList<DailyProgress> trainingProgressList = new ArrayList<>();
    private JTextArea progressTextArea;

    public BasketballPerformanceTrackerApp() {
        setTitle("HoopsTrack");
        setSize(800, 600);
        setDefaultCloseOperation(EXIT_ON_CLOSE);

        // Initialize panels
        loginPanel = createLoginPanel();
        signUpPanel = createSignUpPanel();
        mainAppPanel = createMainAppPanel();

        setContentPane(loginPanel); // Show login panel first
        setLocationRelativeTo(null); // Center window
    }

    // ---------------- LOGIN PANEL ------------------
    private JPanel createLoginPanel() {
        // Custom JPanel with a background image
        JPanel panel = new JPanel(new GridBagLayout()) {
            /**
			 * 
			 */
			private static final long serialVersionUID = 1L;
			private Image backgroundImage = new ImageIcon("C:\\Von Folder\\Java Codes\\NumericalProject\\src\\pictures\\basketball2.jpg").getImage(); // Path to image

            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this); // Draw the image to fill the panel
            }
        };

        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        // Heading
        JLabel heading = new JLabel("Login");
        heading.setFont(new Font("Arial", Font.BOLD, 24));
        heading.setForeground(Color.ORANGE); // Ensure the text is visible on the background

        // Input fields
        JTextField usernameField = new JTextField(15);
        JPasswordField passwordField = new JPasswordField(15);

        // Buttons
        JButton loginButton = new JButton("Login");
        JButton goToSignUpButton = new JButton("Sign Up");

        // GridBagConstraints for layout
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;

        panel.add(heading, gbc);

        gbc.gridwidth = 1; // Reset grid width
        gbc.gridy++;

        // Username Label
        JLabel usernameLabel = new JLabel("Username:", JLabel.RIGHT);
        usernameLabel.setForeground(Color.ORANGE); // Set text color to white
        panel.add(usernameLabel, gbc);

        gbc.gridx++;
        panel.add(usernameField, gbc);

        gbc.gridx = 0;
        gbc.gridy++;

        // Password Label
        JLabel passwordLabel = new JLabel("Password:", JLabel.RIGHT);
        passwordLabel.setForeground(Color.ORANGE); // Set text color to white
        panel.add(passwordLabel, gbc);

        gbc.gridx++;
        panel.add(passwordField, gbc);

        gbc.gridx = 0;
        gbc.gridy++;
        panel.add(loginButton, gbc);
        gbc.gridx++;
        panel.add(goToSignUpButton, gbc);

        // Login button action
        loginButton.addActionListener(e -> {
            String username = usernameField.getText();
            String password = new String(passwordField.getPassword());

            if (userAccounts.containsKey(username) && userAccounts.get(username).equals(password)) {
                JOptionPane.showMessageDialog(this, "Login Successful!", "Success", JOptionPane.INFORMATION_MESSAGE);
                setContentPane(mainAppPanel); // Show the main app
                revalidate();
            } else {
                JOptionPane.showMessageDialog(this, "Invalid Credentials!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        // Sign-Up button action
        goToSignUpButton.addActionListener(e -> {
            setContentPane(signUpPanel);
            revalidate();
        });

        return panel;
    }
    // ---------------- SIGN-UP PANEL ------------------
    private JPanel createSignUpPanel() {
        // Custom JPanel with a background image
        JPanel panel = new JPanel(new GridBagLayout()) {
            /**
			 * 
			 */
			private static final long serialVersionUID = 1L;
			private Image backgroundImage = new ImageIcon("C:\\Von Folder\\Java Codes\\NumericalProject\\src\\pictures\\basketball2.jpg").getImage(); // Load the background image

            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this); // Draw the image to fill the panel
            }
        };

        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        // Heading
        JLabel heading = new JLabel("Sign Up");
        heading.setFont(new Font("Arial", Font.BOLD, 24));
        heading.setForeground(Color.ORANGE); // Make text white to contrast with the background

        // Input fields
        JTextField usernameField = new JTextField(15);
        JPasswordField passwordField = new JPasswordField(15);

        // Labels
        JLabel usernameLabel = new JLabel("New Username:");
        usernameLabel.setForeground(Color.ORANGE); // White text for visibility
        JLabel passwordLabel = new JLabel("New Password:");
        passwordLabel.setForeground(Color.ORANGE);

        // Buttons
        JButton signUpButton = new JButton("Sign Up");
        JButton backToLoginButton = new JButton("Back to Login");

        // GridBagConstraints for layout
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.gridx = 0;
        gbc.gridy = 0;

        panel.add(heading, gbc);
        gbc.gridy++;
        panel.add(usernameLabel, gbc);
        gbc.gridx++;
        panel.add(usernameField, gbc);

        gbc.gridx = 0;
        gbc.gridy++;
        panel.add(passwordLabel, gbc);
        gbc.gridx++;
        panel.add(passwordField, gbc);

        gbc.gridx = 0;
        gbc.gridy++;
        panel.add(signUpButton, gbc);
        gbc.gridx++;
        panel.add(backToLoginButton, gbc);

        // Sign-Up button action
        signUpButton.addActionListener(e -> {
            String username = usernameField.getText();
            String password = new String(passwordField.getPassword());

            if (!username.isEmpty() && !password.isEmpty()) {
                if (!userAccounts.containsKey(username)) {
                    userAccounts.put(username, password);
                    JOptionPane.showMessageDialog(this, "Account Created Successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    setContentPane(loginPanel);
                    revalidate();
                } else {
                    JOptionPane.showMessageDialog(this, "Username already exists!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please fill in all fields!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        // Back to Login button action
        backToLoginButton.addActionListener(e -> {
            setContentPane(loginPanel);
            revalidate();
        });

        return panel;
    }


    // ---------------- MAIN APP PANEL ------------------
    private JPanel createMainAppPanel() {
        // JPanel with a black background color
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(Color.BLACK); // Set background color to black

        // Set a preferred size for the main panel
        panel.setPreferredSize(new Dimension(800, 600));

        // Heading label
        JLabel welcomeLabel = new JLabel("Welcome to HoopsTrack!", JLabel.CENTER);
        welcomeLabel.setFont(new Font("Arial", Font.BOLD, 22));
        welcomeLabel.setForeground(Color.ORANGE); // Ensure text is visible on the black background

        // Main Tabs
        JTabbedPane tabbedPane = new JTabbedPane();
        tabbedPane.addTab("User Info", createUserInfoPanel());
        tabbedPane.addTab("Skill Drills", createSkillDrillsPanel());
        tabbedPane.addTab("Results", createResultsPanel());
        tabbedPane.addTab("Progress", createProgressPanel());

        // Optional: Set preferred size for the tabbed pane
        tabbedPane.setPreferredSize(new Dimension(780, 500));

        // Add components to the panel
        panel.add(welcomeLabel, BorderLayout.NORTH);
        panel.add(tabbedPane, BorderLayout.CENTER);

        return panel;
    }



    // ---------------- USER INFO PANEL ------------------
    private JPanel createUserInfoPanel() {
        // Custom JPanel with a background image
        JPanel backgroundPanel = new JPanel(new BorderLayout()) {
            /**
			 * 
			 */
			private static final long serialVersionUID = 1L;
			private Image backgroundImage = new ImageIcon("C:\\Von Folder\\Java Codes\\NumericalProject\\src\\pictures\\basketball2.jpg").getImage();

            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this); // Draw the background image
            }
        };

        // Inner panel with GridLayout for form components
        JPanel formPanel = new JPanel(new GridLayout(6, 2, 10, 10));
        formPanel.setOpaque(false); // Make the form panel transparent so the background is visible
        formPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        // Form components
        JLabel ageLabel = new JLabel("Age:");
        ageLabel.setForeground(Color.ORANGE); // Set font color to orange
        formPanel.add(ageLabel);

        ageField = new JTextField();
        formPanel.add(ageField);

        JLabel weightLabel = new JLabel("Weight (kg):");
        weightLabel.setForeground(Color.ORANGE);
        formPanel.add(weightLabel);

        weightField = new JTextField();
        formPanel.add(weightField);

        JLabel bodyTypeLabel = new JLabel("Body Type:");
        bodyTypeLabel.setForeground(Color.ORANGE);
        formPanel.add(bodyTypeLabel);

        bodyTypeComboBox = new JComboBox<>(new String[]{"Slim", "Average", "Heavy"});
        formPanel.add(bodyTypeComboBox);

        JLabel skillLevelLabel = new JLabel("Skill Level:");
        skillLevelLabel.setForeground(Color.ORANGE);
        formPanel.add(skillLevelLabel);

        skillLevelComboBox = new JComboBox<>(new String[]{"1", "2", "3"});
        formPanel.add(skillLevelComboBox);

        JLabel trainingDaysLabel = new JLabel("Training Days:");
        trainingDaysLabel.setForeground(Color.ORANGE);
        formPanel.add(trainingDaysLabel);

        trainingDaysField = new JTextField();
        formPanel.add(trainingDaysField);


        JButton saveButton = new JButton("Save Info");
        saveButton.addActionListener(e -> saveUserInfo());
        formPanel.add(saveButton);

        // Add the form panel to the background panel
        backgroundPanel.add(formPanel, BorderLayout.CENTER);

        return backgroundPanel;
    }


    // ---------------- SKILL DRILLS PANEL ------------------
    //private int shootingTimeElapsed = 0;
    //private int dribblingTimeElapsed = 0;
   // private boolean shootingPaused = false;
    //private boolean dribblingPaused = false;


    private JPanel createSkillDrillsPanel() {
        // Custom JPanel with a background image
        JPanel panel = new JPanel(new GridLayout(8, 1, 10, 10)) {
            /**
			 * 
			 */
			private static final long serialVersionUID = 1L;
			private Image backgroundImage = new ImageIcon("C:\\Von Folder\\Java Codes\\NumericalProject\\src\\pictures\\basketball2.jpg").getImage();

            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this); // Draw the background image
            }
        };
        panel.setOpaque(false); // Make sure the panel paints the background correctly

        // Timer Input Fields
        JPanel inputPanel = new JPanel(new FlowLayout());
        inputPanel.setOpaque(false); // Transparent background for sub-panels
        JLabel inputLabel = new JLabel("Set Timer (MM:SS): ");
        inputLabel.setForeground(Color.ORANGE); // Set font color to orange
        JTextField minutesField = new JTextField(2);
        JTextField secondsField = new JTextField(2);
        inputPanel.add(inputLabel);
        inputPanel.add(minutesField);
        inputPanel.add(new JLabel(":"));
        inputPanel.add(secondsField);

        // Timer Labels with Bigger Font
        shootingTimerLabel = new JLabel("Shooting Timer: 00:00", JLabel.CENTER);
        shootingTimerLabel.setFont(new Font("Arial", Font.BOLD, 24));
        shootingTimerLabel.setForeground(Color.ORANGE);

        dribblingTimerLabel = new JLabel("Dribbling Timer: 00:00", JLabel.CENTER);
        dribblingTimerLabel.setFont(new Font("Arial", Font.BOLD, 24));
        dribblingTimerLabel.setForeground(Color.ORANGE);

        exerciseMessageLabel = new JLabel("Select skill level to display exercise details", JLabel.CENTER);
        exerciseMessageLabel.setFont(new Font("Arial", Font.BOLD, 15));
        exerciseMessageLabel.setForeground(Color.ORANGE);

        // Buttons for Shooting Timer
        JButton startShootingButton = new JButton("Start");
        JButton pauseShootingButton = new JButton("Pause");
        JButton resetShootingButton = new JButton("Reset");

        // Buttons for Dribbling Timer
        JButton startDribblingButton = new JButton("Start");
        JButton pauseDribblingButton = new JButton("Pause");
        JButton resetDribblingButton = new JButton("Reset");

        // Button Sizes
        Dimension buttonSize = new Dimension(80, 30);
        startShootingButton.setPreferredSize(buttonSize);
        pauseShootingButton.setPreferredSize(buttonSize);
        resetShootingButton.setPreferredSize(buttonSize);
        startDribblingButton.setPreferredSize(buttonSize);
        pauseDribblingButton.setPreferredSize(buttonSize);
        resetDribblingButton.setPreferredSize(buttonSize);

        // Shooting Timer Logic
        startShootingButton.addActionListener(e -> {
            int minutes = Integer.parseInt(minutesField.getText());
            int seconds = Integer.parseInt(secondsField.getText());
            startTimer(minutes * 60 + seconds, shootingTimerLabel);
        });
        pauseShootingButton.addActionListener(e -> pauseTimer());
        resetShootingButton.addActionListener(e -> resetTimer(shootingTimerLabel));

        // Dribbling Timer Logic
        startDribblingButton.addActionListener(e -> {
            int minutes = Integer.parseInt(minutesField.getText());
            int seconds = Integer.parseInt(secondsField.getText());
            startTimer(minutes * 60 + seconds, dribblingTimerLabel);
        });
        pauseDribblingButton.addActionListener(e -> pauseTimer());
        resetDribblingButton.addActionListener(e -> resetTimer(dribblingTimerLabel));

        // Add Components to Panel
        panel.add(inputPanel);
        panel.add(shootingTimerLabel);
        panel.add(createButtonPanel(startShootingButton, pauseShootingButton, resetShootingButton));
        panel.add(dribblingTimerLabel);
        panel.add(createButtonPanel(startDribblingButton, pauseDribblingButton, resetDribblingButton));
        panel.add(exerciseMessageLabel);

        skillLevelComboBox.addActionListener(e -> updateExerciseMessage());
        return panel;
    }

    // Helper Method to Create Button Panel
    private JPanel createButtonPanel(JButton start, JButton pause, JButton reset) {
        JPanel buttonPanel = new JPanel(new FlowLayout());
        buttonPanel.setOpaque(false); // Ensure buttons panel is transparent
        buttonPanel.add(start);
        buttonPanel.add(pause);
        buttonPanel.add(reset);
        return buttonPanel;
    }


    // ---------------- RESULTS PANEL ------------------
    private JPanel createResultsPanel() {
        // Custom JPanel with a background image
        JPanel panel = new JPanel(new GridLayout(4, 2, 10, 10)) {
            /**
			 * 
			 */
			private static final long serialVersionUID = 1L;
			private Image backgroundImage = new ImageIcon("C:\\Von Folder\\Java Codes\\NumericalProject\\src\\pictures\\basketball2.jpg").getImage();

            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this); // Draw the background image
            }
        };
        panel.setOpaque(false); // Make sure the panel paints the background correctly

        // Shots Made Label
        JLabel shotsMadeLabel = new JLabel("Shots Made:");
        shotsMadeLabel.setForeground(Color.ORANGE); // Set font color to orange
        panel.add(shotsMadeLabel);
        shotsMadeField = new JTextField();
        panel.add(shotsMadeField);

        // Dribbling Time Label
        JLabel dribblingTimeLabel = new JLabel("Dribbling Time (secs):");
        dribblingTimeLabel.setForeground(Color.ORANGE); // Set font color to orange
        panel.add(dribblingTimeLabel);
        dribblingTimeField = new JTextField();
        panel.add(dribblingTimeField);

        // Calculate Button
        JButton calculateButton = new JButton("Calculate Results");
        calculateButton.addActionListener(e -> calculateResults());
        panel.add(calculateButton);

        return panel;
    }


    // ---------------- PROGRESS PANEL ------------------
    private JPanel createProgressPanel() {
        // Custom JPanel with a background image
        JPanel panel = new JPanel(new BorderLayout(10, 10)) {
            /**
			 * 
			 */
			private static final long serialVersionUID = 1L;
			private Image backgroundImage = new ImageIcon("C:\\Von Folder\\Java Codes\\NumericalProject\\src\\pictures\\basketball2.jpg").getImage();

            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this); // Draw the background image
            }
        };
        panel.setOpaque(false); // Make sure the panel paints the background correctly

        // Heading label
        JLabel heading = new JLabel("Training Progress");
        heading.setFont(new Font("Arial", Font.BOLD, 18));
        heading.setHorizontalAlignment(SwingConstants.CENTER);
        heading.setForeground(Color.ORANGE); // Set font color to orange

        // Progress Text Area
        progressTextArea = new JTextArea(10, 30);
        progressTextArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(progressTextArea);

        // Button to calculate endurance
        JButton calculateEnduranceButton = new JButton("Calculate Endurance");
        calculateEnduranceButton.addActionListener(e -> calculateEndurance());

        // User info label
        userInfoLabel = new JLabel("User Info: Not Available", JLabel.CENTER);
        userInfoLabel.setForeground(Color.ORANGE); // Set font color to orange

        // Button to load progress
        JButton loadProgressButton = new JButton("Load Training Progress");
        loadProgressButton.addActionListener(e -> loadProgress());

        // Panel layout
        JPanel bottomPanel = new JPanel();
        bottomPanel.setLayout(new BoxLayout(bottomPanel, BoxLayout.Y_AXIS));

        // Set the background color of the bottomPanel to black
        bottomPanel.setBackground(Color.BLACK);

        // Add the components to the panel
        bottomPanel.add(calculateEnduranceButton);
        bottomPanel.add(userInfoLabel);
        bottomPanel.add(loadProgressButton);


        // Add components to the main panel
        panel.add(heading, BorderLayout.NORTH);
        panel.add(scrollPane, BorderLayout.CENTER);
        panel.add(bottomPanel, BorderLayout.SOUTH);

        return panel;
    }

    
    private void loadProgress() {
        progressTextArea.setText(""); // Clear the progress text area before loading new data
        for (DailyProgress progress : trainingProgressList) {
            progressTextArea.append(progress.toString() + "\n");
        }
    }
    
    private void calculateEndurance() {
        try {
            int shotsMade = Integer.parseInt(shotsMadeField.getText());
            int dribblingTime = Integer.parseInt(dribblingTimeField.getText());
            int endurance = (shotsMade * 10) + (300 - dribblingTime); // Arbitrary formula for endurance
            JOptionPane.showMessageDialog(this, "Your endurance score is: " + endurance, "Endurance", JOptionPane.INFORMATION_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter valid data for endurance calculation!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // ---------------- USER INFO ACTION ------------------
    private void saveUserInfo() {
        // Save the user information
        savedAge = ageField.getText();
        savedWeight = weightField.getText();
        savedBodyType = (String) bodyTypeComboBox.getSelectedItem();
        savedSkillLevel = (String) skillLevelComboBox.getSelectedItem();
        savedTrainingDays = trainingDaysField.getText();

        // Show a message when user info is saved
        JOptionPane.showMessageDialog(this, "User Info Saved!", "Info", JOptionPane.INFORMATION_MESSAGE);

        // Set the text of the user info label with saved data
        userInfoLabel.setText("<html>Age: " + savedAge + "<br>Weight: " + savedWeight + "<br>Body Type: " + savedBodyType +
                "<br>Skill Level: " + savedSkillLevel + "<br>Training Days: " + savedTrainingDays + "</html>");

        // Set background color of the panel to black
        userInfoLabel.setBackground(Color.BLACK);  // Background color of the label
        userInfoLabel.setOpaque(true);  // Make sure the background color is visible

        // Set font color to orange
        userInfoLabel.setForeground(Color.ORANGE);  // Font color to orange
    }


    

    // ---------------- DRILL TIMER ACTIONS ------------------
    private Timer countdownTimer;
    private int timeRemaining;

    private void startTimer(int totalTime, JLabel timerLabel) {
        if (countdownTimer != null && countdownTimer.isRunning()) {
            countdownTimer.stop();
        }
        timeRemaining = totalTime;
        countdownTimer = new Timer(1000, e -> {
            if (timeRemaining <= 0) {
                countdownTimer.stop();
                timerLabel.setText("Time's Up!");
            } else {
                timeRemaining--;
                timerLabel.setText(String.format("Timer: %02d:%02d", timeRemaining / 60, timeRemaining % 60));
            }
        });
        countdownTimer.start();
    }

    private void pauseTimer() {
        if (countdownTimer != null && countdownTimer.isRunning()) {
            countdownTimer.stop();
        }
    }

    private void resetTimer(JLabel timerLabel) {
        if (countdownTimer != null) {
            countdownTimer.stop();
        }
        timeRemaining = 0;
        timerLabel.setText("Timer: 00:00");
    }
    // ---------------- RESULT CALCULATION ------------------
    private void calculateResults() {
        try {
            // Get shots made and validate input
            int shotsMade = Integer.parseInt(shotsMadeField.getText());
            int totalShots = 25; // Fixed total shots for training
            if (shotsMade < 0 || shotsMade > totalShots) {
                throw new NumberFormatException("Shots made should be between 0 and " + totalShots);
            }

            // Calculate shooting percentage
            double shootingPercentage = (shotsMade * 100.0) / totalShots;

            // Get dribbling time and validate input
            int dribblingTime = Integer.parseInt(dribblingTimeField.getText());
            if (dribblingTime < 0) {
                throw new NumberFormatException("Dribbling time cannot be negative");
            }

            // Get training day and validate input
            int trainingDay = Integer.parseInt(savedTrainingDays);  // Ensure `savedTrainingDays` is properly initialized and valid

            // Create and store the new progress
            DailyProgress newProgress = new DailyProgress(shotsMade, dribblingTime, shootingPercentage, trainingDay);
            trainingProgressList.add(newProgress);

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter valid data for calculation: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    	

    // ---------------- UPDATE EXERCISE MESSAGE ------------------
    private void updateExerciseMessage() {
        String skillLevel = (String) skillLevelComboBox.getSelectedItem();
        switch (skillLevel) {
            case "1":
                exerciseMessageLabel.setText("<html><b>Skill Level 1 Exercises:</b><br>Shooting Drill (4-5 minutes): 5 shots from each of 3 spots.<br>Dribbling Drill (4-5 minutes): Simple cone course (timed).</html>");
                break;
            case "2":
                exerciseMessageLabel.setText("<html><b>Skill Level 2 Exercises:</b><br>Shooting Drill (4-5 minutes): 5 shots from each of 3 farther spots.<br>Dribbling Drill (4-5 minutes): Cone course (timed).</html>");
                break;
            case "3":
                exerciseMessageLabel.setText("<html><b>Skill Level 3 Exercises:</b><br>Shooting Drill (4-5 minutes): 5 shots from each of 3-point lane spots.<br>Dribbling Drill (4-5 minutes): Complex cone course.</html>");
                break;
            default:
                exerciseMessageLabel.setText("Select a skill level to view the exercise details.");
                break;
        }
    }


    // ---------------- MAIN ------------------
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            BasketballPerformanceTrackerApp app = new BasketballPerformanceTrackerApp();
            app.setVisible(true);
        });
    }

    // ---------------- Daily Progress Class ------------------
    static class DailyProgress {
    	int shotsMade, dribblingTime, trainingDays;
        double shootingPercentage;

        public DailyProgress(int shotsMade, int dribblingTime, double shootingPercentage, int trainingDay) {
            this.shotsMade = shotsMade;
            this.dribblingTime = dribblingTime;
            this.shootingPercentage = shootingPercentage;
            this.trainingDays = trainingDay;
        }

        @Override
        public String toString() {
            return "Day " + trainingDays + ": Shots Made = " + shotsMade + ", Dribbling Time = " + dribblingTime + " sec, Shooting % = " + shootingPercentage + "%";
        }
    }
}
