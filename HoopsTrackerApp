package App;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;

public class HoopsTrackerApp extends JFrame {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	// For storing user credentials
    private HashMap<String, String> userAccounts = new HashMap<>();

    // Panels
    private JPanel loginPanel, signUpPanel, mainAppPanel;

    // Fields for User Info
    private JTextField ageField, weightField, shotsMadeField, dribblingTimeField;
    private JComboBox<String> bodyTypeComboBox, skillLevelComboBox, trainingDaysComboBox;
    private JLabel shootingTimerLabel, dribblingTimerLabel, exerciseMessageLabel, userInfoLabel;
    private Timer shootingTimer, dribblingTimer;
    private int shootingTimeRemaining, dribblingTimeRemaining;
    
    private String savedAge, savedWeight, savedBodyType, savedSkillLevel, savedTrainingDays;

    // To store progress
    private ArrayList<DailyProgress> trainingProgressList = new ArrayList<>();
    private JTextArea progressTextArea;

	private JLabel sub1;
	private JLabel sub2;
	private JLabel sub3;
	private JLabel sub5;
	private JLabel sub4;
	private JLabel sub7;
	private JLabel sub6;
	private JLabel sub8;
	private JLabel sub9;
	private JLabel d1;
	private JLabel d2;
	private JLabel d3;
	private JLabel d4;
	private JLabel d5;
	private JLabel d6;
	private JLabel d7;
	private JLabel d8;
	private JLabel d9;
	private Database database;
	private Connection con;

	private String storedID;

	private JLabel timerLabel;

	private JTable progressTable;


    public HoopsTrackerApp(int storedID) {
    	setTitle("HoopsTrack");
        setSize(800, 600);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        database = new Database();
        con = database.getConnection();

        // Initialize panels
        //loginPanel = createLoginPanel();
        //signUpPanel = createSignUpPanel();
        mainAppPanel = createMainAppPanel();

        setContentPane(mainAppPanel); // Show login panel first
        setLocationRelativeTo(null); // Center window
    }

    

    public HoopsTrackerApp() {
		// TODO Auto-generated constructor stub
	}



	// ---------------- MAIN APP PANEL ------------------
    private JPanel createMainAppPanel() {
    	// JPanel with a black background color
        JPanel panel = new JPanel();
        panel.setBackground(Color.BLACK); // Set background color to black

        // Set a preferred size for the main panel
        panel.setPreferredSize(new Dimension(800, 600));

        // Heading label
        JLabel welcomeLabel = new JLabel("Welcome to HoopsTrack!", JLabel.CENTER);
        welcomeLabel.setBounds(0, 0, 784, 26);
        welcomeLabel.setFont(new Font("Arial", Font.BOLD, 22));
        welcomeLabel.setForeground(Color.ORANGE); // Ensure text is visible on the black background

        // Main Tabs
        JTabbedPane tabbedPane = new JTabbedPane();
        tabbedPane.setBounds(0, 26, 784, 535);
        tabbedPane.addTab("User Info", createUserInfoPanel());
        tabbedPane.addTab("Skill Drills", createSkillDrillsPanel());
        tabbedPane.addTab("Results", createResultsPanel());
        tabbedPane.addTab("Progress", createProgressPanel());

        // Optional: Set preferred size for the tabbed pane
        tabbedPane.setPreferredSize(new Dimension(780, 500));
        panel.setLayout(null);

        panel.add(welcomeLabel);
        panel.add(tabbedPane);

        return panel;
    }

    private JLabel createUserInfoPanel() {
        // Custom JLabel with an image as background
        JLabel backgroundLabel = new JLabel() {
            private ImageIcon backgroundImage;

            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);

                // Only scale the image once when the backgroundLabel is first initialized
                if (backgroundImage == null) {
                    ImageIcon icon = new ImageIcon(HoopsTrackerApp.class.getResource("/Images/mainBackground.jpg"));
                    Image img = icon.getImage();
                    backgroundImage = new ImageIcon(img.getScaledInstance(getWidth(), getHeight(), Image.SCALE_SMOOTH));
                }

                // Draw the cached background image
                setIcon(backgroundImage);
                super.paintComponent(g);
            }
        };

        // Set layout to null for absolute positioning (this allows for manual component placement)
        backgroundLabel.setLayout(null);

        // Create a semi-transparent panel to hold the form components
        JPanel transparentPanel = new JPanel(null);  // Use null layout for absolute positioning
        transparentPanel.setBackground(new Color(0, 0, 0, 51));  // Black color with 20% opacity

        // Set bounds for the transparent panel (position and size)
        transparentPanel.setBounds(20, 20, 740, 460);  // Adjust as needed (x, y, width, height)

        // Form components with orange labels and manual positioning
        JLabel ageLabel = new JLabel("Age:");
        ageLabel.setForeground(Color.ORANGE);  // Set font color to orange
        ageLabel.setBounds(20, 20, 100, 25);  // Position the label
        transparentPanel.add(ageLabel);

        ageField = new JTextField();
        ageField.setBounds(130, 20, 150, 25);  // Position the text field
        transparentPanel.add(ageField);

        JLabel weightLabel = new JLabel("Weight (kg):");
        weightLabel.setForeground(Color.ORANGE);
        weightLabel.setBounds(20, 60, 100, 25);  // Position the label
        transparentPanel.add(weightLabel);

        weightField = new JTextField();
        weightField.setBounds(130, 60, 150, 25);  // Position the text field
        transparentPanel.add(weightField);

        JLabel bodyTypeLabel = new JLabel("Body Type:");
        bodyTypeLabel.setForeground(Color.ORANGE);
        bodyTypeLabel.setBounds(20, 100, 100, 25);  // Position the label
        transparentPanel.add(bodyTypeLabel);

        bodyTypeComboBox = new JComboBox<>(new String[]{"- No type selected -", "Slim", "Average", "Heavy"});
        bodyTypeComboBox.setToolTipText("Select corresponding body type");
        bodyTypeComboBox.setBounds(130, 100, 150, 25);  // Position the combo box
        bodyTypeComboBox.setFocusable(false); // Disable focus to avoid blue trace
        transparentPanel.add(bodyTypeComboBox);

        JLabel skillLevelLabel = new JLabel("Skill Level:");
        skillLevelLabel.setForeground(Color.ORANGE);
        skillLevelLabel.setBounds(20, 140, 100, 25);  // Position the label
        transparentPanel.add(skillLevelLabel);

        skillLevelComboBox = new JComboBox<>(new String[]{"- No level selected -", "1", "2", "3"});
        skillLevelComboBox.setToolTipText("Select corresponding level");
        skillLevelComboBox.setBounds(130, 140, 150, 25);  // Position the combo box
        skillLevelComboBox.setFocusable(false); // Disable focus to avoid blue trace
        transparentPanel.add(skillLevelComboBox);

        JLabel trainingDaysLabel = new JLabel("Training Days:");
        trainingDaysLabel.setForeground(Color.ORANGE);
        trainingDaysLabel.setBounds(20, 180, 100, 25);  // Position the label
        transparentPanel.add(trainingDaysLabel);

        trainingDaysComboBox = new JComboBox<>(new String[]{"- No schedule selected -", "Monday, Wednesday & Friday", "Tuesday & Thursday", "Saturday & Sunday"});
        trainingDaysComboBox.setToolTipText("Select corresponding schedule");
        trainingDaysComboBox.setBounds(130, 180, 150, 25);  // Position the combo box
        trainingDaysComboBox.setFocusable(false); // Disable focus to avoid blue trace
        transparentPanel.add(trainingDaysComboBox);

        JButton saveButton = new JButton("Save Info");
        saveButton.addActionListener(e -> saveUserInfo());
        saveButton.setBounds(130, 220, 150, 30);  // Position the button
        transparentPanel.add(saveButton);

        // Add the transparent form panel on top of the background label
        backgroundLabel.add(transparentPanel);

        return backgroundLabel;
    }










    // ---------------- SKILL DRILLS PANEL ------------------
    //private int shootingTimeElapsed = 0;
    //private int dribblingTimeElapsed = 0;
   // private boolean shootingPaused = false;
    //private boolean dribblingPaused = false;


    // ---------------- SKILL DRILLS PANEL ------------------
    //private int shootingTimeElapsed = 0;
    //private int dribblingTimeElapsed = 0;


    private JPanel createSkillDrillsPanel() {
        // Custom JPanel with a background image and absolute layout
        JPanel panel = new JPanel(null) { 
            private static final long serialVersionUID = 1L;
            private Image backgroundImage = new ImageIcon("C:\\Von Folder\\Java Codes\\NumericalProject\\src\\pictures\\basketball2.jpg").getImage();

            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this); // Draw the background image
            }
        };
        panel.setMaximumSize(new Dimension(800, 600));
        panel.setOpaque(false); // Make sure the panel paints the background correctly

        // Timer Input Fields
        JPanel inputPanel = new JPanel(null);
        inputPanel.setBounds(5, 18, 1, 1);
        inputPanel.setOpaque(false);
        JLabel inputLabel = new JLabel("Set Timer (MM:SS): ");
        inputLabel.setForeground(Color.ORANGE);
        inputLabel.setBounds(10, 10, 150, 30);

        JTextField minutesField = new JTextField(2);
        minutesField.setBounds(170, 10, 30, 30);
        JTextField secondsField = new JTextField(2);
        secondsField.setBounds(210, 10, 30, 30);
        inputPanel.add(inputLabel);
        inputPanel.add(minutesField);
        inputPanel.add(new JLabel(":"));
        inputPanel.add(secondsField);
        panel.setLayout(null);

        // Add Components to Panel
        panel.add(inputPanel);
        
        JPanel panel1 = new JPanel();
        panel1.setOpaque(false);
        panel1.setBackground(new Color(0, 0, 0));
        panel1.setBounds(5, 11, 252, 491);
        panel.add(panel1);
        panel1.setLayout(null);

        JButton pauseTimerButton = new JButton("Pause");
        pauseTimerButton.setBounds(96, 68, 61, 23);
        panel1.add(pauseTimerButton);
        pauseTimerButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
            }
        });

        // Buttons for Dribbling Timer
        JButton startTimerButton = new JButton("Start"); // Change to startTimerButton
        startTimerButton.setBounds(10, 68, 57, 23);
        panel1.add(startTimerButton);
        
        timerLabel = new JLabel("Dribbling Timer: 00:00", JLabel.CENTER);
        timerLabel.setBounds(0, 11, 252, 26);
        panel1.add(timerLabel);
        timerLabel.setFont(new Font("Arial", Font.BOLD, 22));
        timerLabel.setForeground(Color.ORANGE);
        
        JButton resetTimerButton = new JButton("Reset");
        resetTimerButton.setBounds(181, 68, 61, 23);
        panel1.add(resetTimerButton);
        
        JLabel currentLevelDribble = new JLabel("Current Level: 1", SwingConstants.CENTER);
        currentLevelDribble.setForeground(Color.ORANGE);
        currentLevelDribble.setFont(new Font("Arial", Font.BOLD, 14));
        currentLevelDribble.setBounds(0, 36, 252, 26);
        panel1.add(currentLevelDribble);
        
        JTextField minutesField1 = new JTextField();
        minutesField1.setBounds(23, 113, 50, 20);
        panel1.add(minutesField1);
        minutesField1.setColumns(10);
        
        JTextField secondField1 = new JTextField();
        secondField1.setColumns(10);
        secondField1.setBounds(107, 113, 50, 20);
        panel1.add(secondField1);
        
        JLabel lblNewLabel = new JLabel(":");
        lblNewLabel.setHorizontalAlignment(SwingConstants.CENTER);
        lblNewLabel.setBounds(62, 116, 46, 14);
        panel1.add(lblNewLabel);

        // Add action listeners
        startTimerButton.addActionListener(e -> {
            int minutes = Integer.parseInt(minutesField1.getText());
            int seconds = Integer.parseInt(secondField1.getText());
            startTimer(minutes * 60 + seconds, timerLabel);
        });

        pauseTimerButton.addActionListener(e -> pauseTimer());
        resetTimerButton.addActionListener(e -> resetTimer(timerLabel));

        return panel;
    }
    
    
    

    

    // ---------------- RESULTS PANEL ------------------
    private JPanel createResultsPanel() {
        // Custom JPanel with a background image and absolute layout
        JPanel panel = new JPanel(null) { 
            private static final long serialVersionUID = 1L;
            private Image backgroundImage = new ImageIcon("C:\\Von Folder\\Java Codes\\NumericalProject\\src\\pictures\\basketball2.jpg").getImage();

            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this); // Draw the background image
            }
        };
        panel.setOpaque(false); // Make sure the panel paints the background correctly
        panel.setLayout(null);

        // Shots Made Label
        JLabel shotsMadeLabel = new JLabel("Shots Made:");
        shotsMadeLabel.setForeground(Color.ORANGE);
        shotsMadeLabel.setBounds(234, 9, 60, 14);
        panel.add(shotsMadeLabel);
        shotsMadeField = new JTextField();
        shotsMadeField.setBounds(299, 6, 7, 20);
        panel.add(shotsMadeField);

        // Dribbling Time Label
        JLabel dribblingTimeLabel = new JLabel("Dribbling Time (secs):");
        dribblingTimeLabel.setForeground(Color.ORANGE);
        dribblingTimeLabel.setBounds(311, 9, 102, 14);
        panel.add(dribblingTimeLabel);
        dribblingTimeField = new JTextField();
        dribblingTimeField.setBounds(418, 6, 7, 20);
        panel.add(dribblingTimeField);

        // Calculate Button
        JButton calculateButton = new JButton("Calculate Results");
        calculateButton.setBounds(430, 5, 115, 23);
        calculateButton.addActionListener(e -> calculateResults());
        panel.add(calculateButton);

        return panel;
    }


 // ---------------- PROGRESS PANEL ------------------

    private JPanel createProgressPanel() {
        // Custom JPanel with a background image and absolute layout
        JPanel panel = new JPanel(null) { 
            private static final long serialVersionUID = 1L;
            private Image backgroundImage = new ImageIcon("C:\\Von Folder\\Java Codes\\NumericalProject\\src\\pictures\\basketball2.jpg").getImage();

            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this); // Draw the background image
            }
        };
        panel.setOpaque(false); // Make sure the panel paints the background correctly
        panel.setLayout(null);

        // Transparent panel with size 20, 20, 740, 460
        JPanel transparentPanel = new JPanel();
        transparentPanel.setOpaque(false); // Make the panel transparent
        transparentPanel.setBounds(10, 11, 753, 487); // Set size and position
        transparentPanel.setLayout(null); // Use absolute layout for positioning components inside it

        // Heading label
        JLabel heading = new JLabel("Training Progress");
        heading.setFont(new Font("Arial", Font.BOLD, 18));
        heading.setHorizontalAlignment(SwingConstants.CENTER);
        heading.setForeground(Color.ORANGE);
        heading.setBounds(32, 21, 155, 22); // Position the heading label
        transparentPanel.add(heading);

        // Progress Table with Scroll Pane
        String[] columnNames = {"x", "y1", "y2", "y3"}; // Column names for the table
        Object[][] data = {}; // Initialize an empty 2D array for table data (populate this dynamically later)

        // Create a DefaultTableModel and set it as the model for the JTable
        DefaultTableModel model = new DefaultTableModel(data, columnNames);
        progressTable = new JTable(model); // Set the table model here

        JScrollPane scrollPane = new JScrollPane(progressTable); // Wrap the table in a scroll pane
        scrollPane.setBounds(32, 50, 680, 110); // Position the scroll pane in the panel
        transparentPanel.add(scrollPane);

        // User info label
        userInfoLabel = new JLabel("User Info: Not Available", JLabel.CENTER);
        userInfoLabel.setForeground(Color.ORANGE);
        userInfoLabel.setBounds(605, 91, 115, 14); // Position the label
        transparentPanel.add(userInfoLabel);

        // Add the transparent panel to the main panel
        panel.add(transparentPanel);

        // Call the method to load progress from the database
        loadProgressFromDatabase();

        return panel;
    }

    // Method to load data from the database and update the progressTable
    private void loadProgressFromDatabase() {
        Database db = new Database();
        con = db.getConnection(); // Get the active connection

        DefaultTableModel model = (DefaultTableModel) progressTable.getModel();
        model.setRowCount(0); // Clear the current rows in the table

        // SQL query to fetch data from the 'progress' table based on user_name and user_level
        String query = "SELECT x, y1, y2, y3 FROM progress WHERE name LIKE ? AND level = ?";

        try (PreparedStatement pst = con.prepareStatement(query)) {
            // Get stored user information
            String userName = userLogin.storedUserName(); // Assuming storedUserName() returns the user's name
            int userLevel = userLogin.storedUserLevel(); // Assuming storedUserLevel() returns the user's level

            // Print the user info for debugging
            System.out.println("User Name: " + userName);
            System.out.println("User Level: " + userLevel);

            // Bind parameters
            pst.setString(1, "%" + userName + "%"); // Use wildcard for LIKE
            pst.setInt(2, userLevel);

            ResultSet rs = pst.executeQuery();

            // Loop through the result set and populate the table model
            while (rs.next()) {
                int x = rs.getInt("x");
                float y1 = rs.getFloat("y1");
                float y2 = rs.getFloat("y2");
                int y3 = rs.getInt("y3");

                // Print the values for debugging
                System.out.printf("Retrieved - x: %d, y1: %.2f, y2: %.2f, y3: %d%n", x, y1, y2, y3);

                Object[] row = { x, y1, y2, y3 };
                model.addRow(row); // Add the row to the table model
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error loading data from database: " + e.getMessage());
        } finally {
            db.closeConnection(); // Close the connection when done
        }
    }
    
    private void calculateEndurance() {
        try {
            int shotsMade = Integer.parseInt(shotsMadeField.getText());
            int dribblingTime = Integer.parseInt(dribblingTimeField.getText());
            int endurance = (shotsMade * 10) + (300 - dribblingTime); // Arbitrary formula for endurance
            JOptionPane.showMessageDialog(this, "Your endurance score is: " + endurance, "Endurance", JOptionPane.INFORMATION_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter valid data for endurance calculation!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // ---------------- USER INFO ACTION ------------------
    private void saveUserInfo() {
        savedAge = ageField.getText();
        savedWeight = weightField.getText();
        savedBodyType = (String) bodyTypeComboBox.getSelectedItem();
        savedSkillLevel = (String) skillLevelComboBox.getSelectedItem();
        savedTrainingDays = (String) trainingDaysComboBox.getSelectedItem();

     // Retrieve field values
        String age = ageField.getText().trim();
        String weight = weightField.getText().trim();
        String bodyType = (String) bodyTypeComboBox.getSelectedItem();
        String skillLevel = (String) skillLevelComboBox.getSelectedItem();
        String trainingDays = (String) trainingDaysComboBox.getSelectedItem();

        // Collect all validation errors
        StringBuilder errors = new StringBuilder();

        // Validate age (whole number)
        if (age.isEmpty()) {
            errors.append("Age cannot be blank.\n");
        } else {
            try {
                Integer.parseInt(age);  // Check if age is a valid integer
            } catch (NumberFormatException ex) {
                errors.append("Age must be a whole number.\n");
            }
        }

        // Validate weight (number with up to 2 decimal places)
        if (weight.isEmpty()) {
            errors.append("Weight cannot be blank.\n");
        } else {
            try {
                // Validate weight as a number with up to two decimal places
                if (!weight.matches("^\\d+(\\.\\d{1,2})?$")) {
                    // Round the weight to 2 decimal places if more than 2 decimals
                    BigDecimal bd = new BigDecimal(weight);
                    bd = bd.setScale(2, RoundingMode.HALF_UP);
                    weightField.setText(bd.toString()); // Update the weight field with rounded value
                }
            } catch (NumberFormatException ex) {
                errors.append("Invalid weight format.\n");
            }
        }

        // Validate combo boxes
        if ("- No type selected -".equals(bodyType)) {
            errors.append("Please select a valid body type.\n");
        }
        if ("- No level selected -".equals(skillLevel)) {
            errors.append("Please select a valid skill level.\n");
        }
        if ("- No schedule selected -".equals(trainingDays)) {
            errors.append("Please select valid training days.\n");
        }

        // Show error messages if any fields are invalid
        if (errors.length() > 0) {
            JOptionPane.showMessageDialog(null, errors.toString(), "Validation Error", JOptionPane.ERROR_MESSAGE);
            return; // Prevent saving if there are validation errors
        }

        // If all fields are valid, proceed with saving
        JOptionPane.showMessageDialog(null, "Information saved successfully!");
    }

    

    // ---------------- DRILL TIMER ACTIONS ------------------
    private Timer countdownTimer;
    private int timeRemaining;

    private void startTimer(int totalTime, JLabel timerLabel) {
        if (countdownTimer != null && countdownTimer.isRunning()) {
            countdownTimer.stop();
        }
        timeRemaining = totalTime;
        countdownTimer = new Timer(1000, e -> {
            if (timeRemaining <= 0) {
                countdownTimer.stop();
                timerLabel.setText("Time's Up!");
            } else {
                timeRemaining--;
                timerLabel.setText(String.format("Timer: %02d:%02d", timeRemaining / 60, timeRemaining % 60));
            }
        });
        countdownTimer.start();
    }

    private void pauseTimer() {
        if (countdownTimer != null && countdownTimer.isRunning()) {
            countdownTimer.stop();
        }
    }

    private void resetTimer(JLabel timerLabel) {
        if (countdownTimer != null) {
            countdownTimer.stop();
        }
        timeRemaining = 0;
        timerLabel.setText("Timer: 00:00");
    }
    // ---------------- RESULT CALCULATION ------------------
    private void calculateResults() {
        try {
            // Get shots made and validate input
            int shotsMade = Integer.parseInt(shotsMadeField.getText());
            int totalShots = 25; // Fixed total shots for training
            if (shotsMade < 0 || shotsMade > totalShots) {
                throw new NumberFormatException("Shots made should be between 0 and " + totalShots);
            }

            // Calculate shooting percentage
            double shootingPercentage = (shotsMade * 100.0) / totalShots;

            // Get dribbling time and validate input
            int dribblingTime = Integer.parseInt(dribblingTimeField.getText());
            if (dribblingTime < 0) {
                throw new NumberFormatException("Dribbling time cannot be negative");
            }

            // Get training day and validate input
            int trainingDay = Integer.parseInt(savedTrainingDays);  // Ensure `savedTrainingDays` is properly initialized and valid

            // Create and store the new progress
            DailyProgress newProgress = new DailyProgress(shotsMade, dribblingTime, shootingPercentage, trainingDay);
            trainingProgressList.add(newProgress);

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter valid data for calculation: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    	

    // ---------------- UPDATE EXERCISE MESSAGE ------------------
    private void updateExerciseMessage() {
        String skillLevel = (String) skillLevelComboBox.getSelectedItem();
        switch (skillLevel) {
            case "1":
                exerciseMessageLabel.setText("<html><b>Skill Level 1 Exercises:</b><br>Shooting Drill (4-5 minutes): 5 shots from each of 3 spots.<br>Dribbling Drill (4-5 minutes): Simple cone course (timed).</html>");
                break;
            case "2":
                exerciseMessageLabel.setText("<html><b>Skill Level 2 Exercises:</b><br>Shooting Drill (4-5 minutes): 5 shots from each of 3 farther spots.<br>Dribbling Drill (4-5 minutes): Cone course (timed).</html>");
                break;
            case "3":
                exerciseMessageLabel.setText("<html><b>Skill Level 3 Exercises:</b><br>Shooting Drill (4-5 minutes): 5 shots from each of 3-point lane spots.<br>Dribbling Drill (4-5 minutes): Complex cone course.</html>");
                break;
            default:
                exerciseMessageLabel.setText("Select a skill level to view the exercise details.");
                break;
        }
    }


    // ---------------- MAIN ------------------
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            HoopsTrackerApp app = new HoopsTrackerApp();
            app.setVisible(true);
        });
    }

    // ---------------- Daily Progress Class ------------------
    static class DailyProgress {
    	int shotsMade, dribblingTime, trainingDays;
        double shootingPercentage;

        public DailyProgress(int shotsMade, int dribblingTime, double shootingPercentage, int trainingDay) {
            this.shotsMade = shotsMade;
            this.dribblingTime = dribblingTime;
            this.shootingPercentage = shootingPercentage;
            this.trainingDays = trainingDay;
        }

        @Override
        public String toString() {
            return "Day " + trainingDays + ": Shots Made = " + shotsMade + ", Dribbling Time = " + dribblingTime + " sec, Shooting % = " + shootingPercentage + "%";
        }
    }
}
